[manifest]
version = "1.0.0"
priority = 0

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/5 then'''
position = "at"
payload = '''if not (pseudorandom('lucky_mult') < G.GAME.probabilities.normal/5) then
    local effects
    SMODS.calculate_context({roff_probability_missed = true}, effects)
else
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.4, func = function()
                attention_text({
                    text = localize('k_nope_ex'),'''
position = "before"
payload = '''local effects
SMODS.calculate_context({roff_probability_missed = true}, effects)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if pseudorandom('halu'..G.GAME.round_resets.ante) < G.GAME.probabilities.normal/self.ability.extra then'''
position = "at"
payload = '''if not (pseudorandom('halu'..G.GAME.round_resets.ante) < G.GAME.probabilities.normal/self.ability.extra) then
    local effects
    SMODS.calculate_context({roff_probability_missed = true}, effects)
else
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''return {
                        message = localize('k_safe_ex')
                    }'''
position = "before"
payload = '''local effects
    SMODS.calculate_context({roff_probability_missed = true}, effects)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if (context.other_card:get_id() == 8) and (pseudorandom('8ball') < G.GAME.probabilities.normal/self.ability.extra) then'''
position = "at"
payload = '''if (context.other_card:get_id() == 8) and not (pseudorandom('8ball') < G.GAME.probabilities.normal/self.ability.extra) then
    local effects
    SMODS.calculate_context({roff_probability_missed = true}, effects)
elseif context.other_card:get_id() == 8 then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name == 'Business Card' and
                    context.other_card:is_face() and
                    pseudorandom('business') < G.GAME.probabilities.normal/self.ability.extra then'''
position = "at"
payload = '''if self.ability.name == 'Business Card' and context.other_card:is_face() and not (pseudorandom('business') < G.GAME.probabilities.normal/self.ability.extra) then
    local effects
    SMODS.calculate_context({roff_probability_missed = true}, effects)
elseif self.ability.name == 'Business Card' and context.other_card:is_face() then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name ==  'Bloodstone' and
                context.other_card:is_suit("Hearts") and 
                pseudorandom('bloodstone') < G.GAME.probabilities.normal/self.ability.extra.odds then'''
position = "at"
payload = '''if self.ability.name ==  'Bloodstone' and context.other_card:is_suit("Hearts") and not (pseudorandom('bloodstone') < G.GAME.probabilities.normal/self.ability.extra.odds) then
    local effects
    SMODS.calculate_context({roff_probability_missed = true}, effects)
elseif self.ability.name ==  'Bloodstone' and context.other_card:is_suit("Hearts") then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name == 'Reserved Parking' and
                    context.other_card:is_face() and
                    pseudorandom('parking') < G.GAME.probabilities.normal/self.ability.extra.odds then'''
position = "at"
payload = '''
if self.ability.name == 'Reserved Parking' and context.other_card:is_face() and not (pseudorandom('parking') < G.GAME.probabilities.normal/self.ability.extra.odds) then
    local effects
    SMODS.calculate_context({roff_probability_missed = true}, effects)
elseif self.ability.name == 'Reserved Parking' and context.other_card:is_face() then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name == 'Space Joker' and pseudorandom('space') < G.GAME.probabilities.normal/self.ability.extra then'''
position = "at"
payload = '''if self.ability.name == 'Space Joker' and not (pseudorandom('space') < G.GAME.probabilities.normal/self.ability.extra) then
    local effects
    SMODS.calculate_context({roff_probability_missed = true}, effects)
elseif self.ability.name == 'Space Joker' then
'''
match_indent = true